name: Terraform CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  TF_VAR_env_prefix: "dev"
  TF_VAR_runner_registration_token: ${{ secrets.RUNNER_TOKEN }}
  TF_VAR_github_repo: ${{ secrets.GITHUB_REPO }}

jobs:
  init:
    name: Terraform Init
    runs-on: self-hosted
    services:
      docker:
        image: docker:19.03.12
        options: --privileged
    steps:
      - name: Set up Docker
        uses: docker/setup-buildx-action@v1

      - name: Set Permissions
        run: sudo chmod -R 777 $(pwd)

      - name: Checkout Code
        uses: actions/checkout@v3
      
      - name: Terraform Init
        run: |
          docker run --rm \
          -u $(id -u):$(id -g) \
          -e AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
          -e AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
          -e AWS_DEFAULT_REGION="${{ secrets.AWS_DEFAULT_REGION }}" \
          -e TF_VAR_env_prefix="${{ env.TF_VAR_env_prefix }}" \
          -e TF_VAR_runner_registration_token="${{ secrets.RUNNER_TOKEN }}" \
          -e TF_VAR_github_repo="${{ secrets.GITHUB_REPO }}" \
          -v $(pwd):/workspace \
          -w /workspace \
          hashicorp/terraform:latest init -upgrade
      - name: Upload Terraform Init Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: terraform-init
          path: |
            .terraform/
            .terraform.lock.hcl

  validate:
    name: Terraform Validate
    runs-on: self-hosted
    needs: init
    services:
      docker:
        image: docker:19.03.12
        options: --privileged
    steps:
      - name: Set up Docker
        uses: docker/setup-buildx-action@v1

      - name: Set Permissions
        run: sudo chmod -R 777 $(pwd)

      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Download Terraform Init Artifacts
        uses: actions/download-artifact@v2
        with:
          name: terraform-init
          download-timeout: 60

      - name: Terraform Validate
        run: |
          docker run --rm \
          -u $(id -u):$(id -g) \
          -e AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
          -e AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
          -e AWS_DEFAULT_REGION="${{ secrets.AWS_DEFAULT_REGION }}" \
          -e TF_VAR_env_prefix="${{ env.TF_VAR_env_prefix }}" \
          -e TF_VAR_runner_registration_token="${{ secrets.RUNNER_TOKEN }}" \
          -e TF_VAR_github_repo="${{ secrets.TF_VAR_github_repo }}" \
          -v $(pwd):/workspace \
          -w /workspace \
          hashicorp/terraform:latest validate
        continue-on-error: true

  sonar:
    name: SonarQube Analysis
    runs-on: self-hosted
    needs: validate
    steps:
      - name: Set up Docker
        uses: docker/setup-buildx-action@v1

      - name: Checkout Code
        uses: actions/checkout@v3

      - name: SonarQube Scan
        run: |
          docker run --rm \
          -u $(id -u):$(id -g) \
          -e SONAR_HOST_URL="${{ secrets.SONAR_HOST_URL }}" \
          -e SONAR_TOKEN="${{ secrets.SONAR_TOKEN }}" \
          -v $(pwd):/workspace \
          -w /workspace \
          sonarsource/sonar-scanner-cli:latest \
          -Dsonar.projectKey=sonar_2024_devsecops \
          -Dsonar.sources=./ \
          -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
          -Dsonar.login=${{ secrets.SONAR_TOKEN }}

  zap:
    name: OWASP ZAP Scan
    runs-on: self-hosted
    needs: validate
    steps:
      - name: Set up Docker
        uses: docker/setup-buildx-action@v1

      - name: Checkout Code
        uses: actions/checkout@v3

      - name: OWASP ZAP Baseline Scan
        run: |
          docker run --rm \
          -u $(id -u):$(id -g) \
          -v $(pwd):/zap/wrk:rw \
          -t owasp/zap2docker-stable zap-baseline.py \
          -t http://your-web-application-url \
          -r zap_report.html
      - name: Upload OWASP ZAP Report
        uses: actions/upload-artifact@v2
        with:
          name: zap-report
          path: zap_report.html

  gitleaks:
    name: Gitleaks Secret Scan
    runs-on: self-hosted
    needs: init
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Gitleaks Scan
        uses: zricethezav/gitleaks-action@v1.4.0
        with:
          args: "--path=. --report-format=json --report-path=gitleaks-report.json"
        continue-on-error: true
      - name: Upload Gitleaks Scan Results
        uses: actions/upload-artifact@v2
        with:
          name: gitleaks-scan
          path: gitleaks-report.json

  njsscan:
    name: Node.js Security Scan
    runs-on: self-hosted
    needs: init
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Install njsscan
        run: pip install njsscan
      - name: Run njsscan
        run: njsscan --exit-warning . --sarif -o njsscan.sarif
        continue-on-error: true
      - name: Upload njsscan Results
        uses: actions/upload-artifact@v2
        with:
          name: njsscan
          path: njsscan.sarif

  retire:
    name: Retire.js Security Scan
    runs-on: self-hosted
    needs: init
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'
      - name: Install Retire.js
        run: npm install -g retire
      - name: Run Retire.js
        run: retire --outputformat json --outputpath retire.json
        continue-on-error: true
      - name: Upload Retire.js Scan Results
        uses: actions/upload-artifact@v2
        with:
          name: retire
          path: retire.json

  build:
    name: Terraform Plan
    runs-on: self-hosted
    needs: validate
    services:
      docker:
        image: docker:19.03.12
        options: --privileged
    steps:
      - name: Set up Docker
        uses: docker/setup-buildx-action@v1

      - name: Set Permissions
        run: sudo chmod -R 777 $(pwd)

      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Download Terraform Init Artifacts
        uses: actions/download-artifact@v2
        with:
          name: terraform-init
          download-timeout: 60

      - name: Set Executable Permissions
        run: sudo chmod -R +x $(pwd)/.terraform

      - name: Terraform Plan
        run: |
          docker run --rm \
          -u $(id -u):$(id -g) \
          -e AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
          -e AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
          -e AWS_DEFAULT_REGION="${{ secrets.AWS_DEFAULT_REGION }}" \
          -e TF_VAR_env_prefix="${{ env.TF_VAR_env_prefix }}" \
          -e TF_VAR_runner_registration_token="${{ secrets.RUNNER_TOKEN }}" \
          -e TF_VAR_github_repo="${{ secrets.TF_VAR_github_repo }}" \
          -v $(pwd):/workspace \
          -w /workspace \
          hashicorp/terraform:latest plan -out planfile
      - name: Upload Planfile
        uses: actions/upload-artifact@v2
        with:
          name: terraform-plan
          path: planfile

  deploy:
    name: Terraform Apply
    runs-on: self-hosted
    services:
      docker:
        image: docker:19.03.12
        options: --privileged
    needs: build
    steps:
      - name: Set up Docker
        uses: docker/setup-buildx-action@v1

      - name: Set Permissions
        run: sudo chmod -R 777 $(pwd)

      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Reinitialize Terraform
        run: |
          docker run --rm \
          -u $(id -u):$(id -g) \
          -e AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
          -e AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
          -e AWS_DEFAULT_REGION="${{ secrets.AWS_DEFAULT_REGION }}" \
          -e TF_VAR_env_prefix="${{ env.TF_VAR_env_prefix }}" \
          -e TF_VAR_runner_registration_token="${{ secrets.RUNNER_TOKEN }}" \
          -e TF_VAR_github_repo="${{ secrets.TF_VAR_github_repo }}" \
          -v $(pwd):/workspace \
          -w /workspace \
          hashicorp/terraform:latest init -upgrade

      - name: Download Terraform Init Artifacts
        uses: actions/download-artifact@v2
        with:
          name: terraform-init
          path: .terraform
          download-timeout: 60

      - name: Download Planfile
        uses: actions/download-artifact@v2
        with:
          name: terraform-plan

      - name: Set Executable Permissions
        run: sudo chmod -R +x $(pwd)/.terraform

      - name: Terraform Apply
        run: |
          docker run --rm \
          -u $(id -u):$(id -g) \
          -e AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
          -e AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
          -e AWS_DEFAULT_REGION="${{ secrets.AWS_DEFAULT_REGION }}" \
          -e TF_VAR_env_prefix="${{ env.TF_VAR_env_prefix }}" \
          -e TF_VAR_runner_registration_token="${{ secrets.RUNNER_TOKEN }}" \
          -e TF_VAR_github_repo="${{ secrets.TF_VAR_github_repo }}" \
          -v $(pwd):/workspace \
          -w /workspace \
          hashicorp/terraform:latest apply -input=false planfile
